<?xml version="1.0" encoding="UTF-8"?>

<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

 <modelVersion>4.0.0</modelVersion> 

 <parent>
  <groupId>org.idisoft</groupId>
  <artifactId>restos</artifactId>
  <version>0.0.1-SNAPSHOT</version>
 </parent>
 
 <artifactId>restos-backend</artifactId>
 <packaging>war</packaging>
 <name>Restos App Backend</name>
 <description>Restos App Backend</description>
 
 <properties>
   <!-- maven-compiler-plugin -->
   <maven.compiler.target>1.7</maven.compiler.target>
   <maven.compiler.source>1.7</maven.compiler.source>
   
   <!-- Arquillian REST Client -->
   <version.arquillian.resteasy.client>1.0.0.Alpha3</version.arquillian.resteasy.client>
   <version.resteasy>3.0.10.Final</version.resteasy> 
 </properties>
 
 
 <dependencyManagement>
  <dependencies> 
   <dependency>
    <groupId>org.jboss.spec</groupId>
    <artifactId>jboss-javaee-7.0</artifactId>
    <version>${version.jboss.spec.javaee.7.0}</version>
    <type>pom</type>
    <scope>import</scope>
   </dependency> 
     
   <dependency>
    <groupId>org.wildfly.bom</groupId>
    <artifactId>jboss-javaee-7.0-with-tools</artifactId>
    <version>${version.jboss.bom.wildfly}</version>
    <type>pom</type>
    <scope>import</scope>
   </dependency>
   
   <dependency>   
    <groupId>org.wildfly.bom</groupId>
    <artifactId>jboss-javaee-7.0-with-hibernate</artifactId>
    <version>${version.jboss.bom.wildfly}</version>
    <type>pom</type>
    <scope>import</scope>
   </dependency>   
  </dependencies>  
 </dependencyManagement>
 
 <dependencies>
 
  <dependency>
   <groupId>org.idisoft</groupId>
   <artifactId>restos-model</artifactId>
   <version>${version.restos}</version>
  </dependency>
  
  <!-- Import the CDI API, we use provided scope as the API is included in JBoss WildFly -->
  <dependency>
    <groupId>javax.enterprise</groupId>
    <artifactId>cdi-api</artifactId>
    <scope>provided</scope>
  </dependency>
  
  <!-- Import the Common Annotations API (JSR-250), we use provided scope as the API is included in JBoss EAP -->
  <dependency>
   <groupId>org.jboss.spec.javax.annotation</groupId>
   <artifactId>jboss-annotations-api_1.2_spec</artifactId>
   <scope>provided</scope>
  </dependency>
  
  <!-- Import the JPA API, we use provided scope as the API is included in JBoss EAP -->
  <dependency>
    <groupId>org.hibernate.javax.persistence</groupId>
    <artifactId>hibernate-jpa-2.1-api</artifactId>
    <scope>provided</scope>
  </dependency>
  
  <!-- resteasy dependencies -->
  <!-- core library -->
  <dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-jaxrs</artifactId>
    <version>${version.resteasy}</version>
    <scope>provided</scope>
  </dependency>
  
  <!-- JAXB support-->
  <dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-jaxb-provider</artifactId>
    <version>${version.resteasy}</version>
    <scope>provided</scope>
  </dependency>
  <dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>jaxrs-api</artifactId>
    <scope>provided</scope>
  </dependency>
  
  <!-- Import the EJB API, we use provided scope as the API is included in JBoss EAP -->
  <dependency>
    <groupId>org.jboss.spec.javax.ejb</groupId>
    <artifactId>jboss-ejb-api_3.2_spec</artifactId>    
    <scope>provided</scope>
  </dependency>
  
  <!-- JSR-303 (Bean Validation) Implementation -->
  <!-- Provides portable constraints such as @Email -->
  <!-- Hibernate Validator is shipped in JBoss EAP -->  
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <scope>provided</scope>
    <exclusions>
      <exclusion>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
      </exclusion>
    </exclusions>
  </dependency>
  
  <!-- Now we declare any tools needed -->
  <!-- Hibernate core -->
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <scope>provided</scope>
  </dependency>
  
  <!-- Annotation processor to generate the JPA 2.0 metamodel classes for typesafe criteria queries -->
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-jpamodelgen</artifactId>
    <scope>provided</scope>
  </dependency>
  
  <!-- Annotation processor that raising compilation errors whenever constraint annotations are incorrectly used. -->
  <dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator-annotation-processor</artifactId>
    <scope>provided</scope>
  </dependency>

  <!-- Needed for running tests (you may also use TestNG) -->
  <dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <scope>test</scope>
  </dependency>
  
  <!-- Mocking framework -->
  <dependency>
  	<groupId>org.mockito</groupId>
  	<artifactId>mockito-core</artifactId>
  	<version>${version.mockito}</version>
  </dependency>
  
  <!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) JPA from JUnit/TestNG -->
  <dependency>
    <groupId>org.jboss.arquillian.junit</groupId>
    <artifactId>arquillian-junit-container</artifactId>
    <scope>test</scope>
  </dependency>
  
  <dependency>
    <groupId>org.jboss.arquillian.protocol</groupId>
    <artifactId>arquillian-protocol-servlet</artifactId>
    <scope>test</scope>
  </dependency>
  
  <dependency>
    <groupId>org.jboss.arquillian.extension</groupId>
    <artifactId>arquillian-persistence-dbunit</artifactId>
    <version>1.0.0.Alpha7</version>
    <scope>test</scope>
  </dependency>
  
  <!-- EL implementation for testing -->
  <dependency>
    <groupId>javax.el</groupId>
    <artifactId>javax.el-api</artifactId>
    <version>2.2.4</version>
    <scope>test</scope>
  </dependency>
  
  <dependency>
    <groupId>org.glassfish.web</groupId>
    <artifactId>javax.el</artifactId>
    <version>2.2.4</version>
    <scope>test</scope>
  </dependency>
  
  <!-- Arquillian REST Client for Acceptance tests -->
		<dependency>
    		<groupId>org.jboss.arquillian.extension</groupId>
    		<artifactId>arquillian-rest-client-api</artifactId>
    		<version>${version.arquillian.resteasy.client}</version>
    		<scope>test</scope>
		</dependency>
		<dependency>
    		<groupId>org.jboss.arquillian.extension</groupId>
    		<artifactId>arquillian-rest-client-impl-3x</artifactId>
    		<version>${version.arquillian.resteasy.client}</version>
    		<scope>test</scope>
		</dependency>
        <dependency>
    		<groupId>org.jboss.resteasy</groupId>
    		<artifactId>resteasy-jackson-provider</artifactId>
    		<version>${version.resteasy}</version>
    		<scope>test</scope>
		</dependency>

  
 </dependencies>
 
 <build>
   <!-- Maven will append the version to the finalName (which is the name given to the generated war, and hence the context root) -->
   <finalName>${project.artifactId}</finalName>   
   <plugins>
     <plugin>
       <artifactId>maven-war-plugin</artifactId>
       <version>${version.war.plugin}</version>
				<configuration>
					<!-- Java EE 6 doesn't require web.xml, Maven needs to catch up! -->
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>	
			
			<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
			<plugin>
				<groupId>org.wildfly.plugins</groupId>
				<artifactId>wildfly-maven-plugin</artifactId>
				<version>${version.wildfly.maven.plugin}</version>
			</plugin>
		</plugins>

	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run just unit tests based on a custom pattern -->

			<!-- Seperate profiles are provided for running all tests, including Arquillian tests that execute in the specified container -->
			<id>default</id>
			<activation>

				<property>
					<name>!default</name>
				</property>
			</activation>
			<build>

				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>

						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in your JBoss AS instance -->
			<!-- This profile will start a new JBoss AS instance, and execute the test, shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<build>

				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>

				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<scope>test</scope>

				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests
 in a remote JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>

						<version>${version.surefire.plugin}</version>
						<configuration>
							<skip>false</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>

					<groupId>org.jboss.as</groupId>
					<!-- <artifactId>jboss-as-arquillian-container-remote</artifactId> -->
 
                    <artifactId>jboss-as-arquillian-container-managed</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        
        <profile>

        	<id>wildfy81-embedded</id>
        	<!-- the dependencies for Wildfly8.1  -->
   			<dependencies>

   			<dependency>

    				<groupId>org.wildfly</groupId>
     				<artifactId>wildfly-arquillian-container-embedded</artifactId>

    				<version>8.1.0.Final</version>
    			</dependency>

   			<dependency>
     				<groupId>org.wildfly</groupId>
     				<artifactId>wildfly-embedded</artifactId>
     				<version>8.1.0.Final</version>

  				</dependency>
 			</dependencies>


		 	<build>

   			<plugins>
      			<!-- You need the maven dependency plugin to download locally a zip with the server, unless you provide your own, it will download under the /target directory -->
         			<plugin>
        				<groupId>org.apache.maven.plugins</groupId>
            			<artifactId>maven-dependency-plugin</artifactId>
             			<version>2.8</version>

            			<executions>
                  			<execution>
                     			<id>unpack</id>
                        		<phase>process-test-classes</phase>

                       		<goals>
	                            	<goal>unpack</goal>
    	                    	</goals>

                       		<configuration>
                            		<artifactItems>
                                		<artifactItem>
                                    		<groupId>org.wildfly</groupId>
                                    		<artifactId>wildfly-dist</artifactId>
                                    		<version>8.1.0.Final</version>

                                   		<type>zip</type>
                                    		<overWrite>false</overWrite>
                                    		<outputDirectory>target</outputDirectory>
                                		</artifactItem>
                            		</artifactItems>

                       		</configuration>
                    		</execution>
                		</executions>

           		</plugin>

          			<plugin>
                		<groupId>org.apache.maven.plugins</groupId>
                		<artifactId>maven-surefire-plugin</artifactId>
                 		<version>2.17</version>
                		<configuration>
                  		<!-- Fork every test because it will launch a separate AS instance -->

                   		<forkMode>always</forkMode>

                   		<systemPropertyVariables>
                        		<java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                          		<!-- the maven dependency plugin will have already downloaded the server on /target -->
                        		<jboss.home>${project.basedir}/target/wildfly-8.1.0.Final</jboss.home>
                        		<module.path>${project.basedir}/target/wildfly-8.1.0.Final/modules</module.path>

                   		</systemPropertyVariables>
                    		<redirectTestOutputToFile>false</redirectTestOutputToFile>
                		</configuration>
            		</plugin>
       
    			</plugins>
  			</build>
		</profile>

        <profile>

           <!-- When built in OpenShift the 'openshift' profile will be
                used when invoking mvn. -->
            <!-- Use this profile for any OpenShift specific customization
                your app will need. -->

           <!-- By default that is to put the resulting archive into the
                'deployments' folder. -->

           <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->

           <id>openshift</id>
            <build>
                <plugins>

                   <plugin>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>${version.war.plugin}</version>
                        <configuration>

                           <outputDirectory>deployments</outputDirectory>
                            <warName>restos</warName>

                       </configuration>
                    </plugin>
                </plugins>
            </build>

        </profile>

        <profile>
            <!-- Activate this profile to identify to the IDE which version of the JSF impl is being used by the
 application server.-->
            <!-- Be sure to include the JBoss maven repository, as the JBoss jsf-impl artifacts are not in maven central. -->

           <!-- See: https://community.jboss.org/wiki/MavenGettingStarted-Developers -->
            <id>debug</id>
            <dependencies>
                <!-- Import the JSF impl, to allow for application debugging -->
                <dependency>
                    <groupId>com.sun.faces</groupId>

                   <artifactId>jsf-impl</artifactId>
                    <scope>provided</scope>
                </dependency>
            </dependencies>
        </profile>

        <!-- Activate JBoss Product Maven repository -->
        <profile>
            <id>jboss-product-repository</id>
            <activation>
                <property>
                    <name>!jboss-product-repository</name>
                </property>
            </activation>
            <repositories>
                <repository>
                    <id>jboss-products-ga-repo</id>
                    <url>http://maven.repository.redhat.com/techpreview/all/</url>
                </repository>
            </repositories>
        </profile>


   </profiles>
</project>